name: Build and deploy on pull request test1234

on:
    pull_request:
        types:
            - closed
        branches:
            - main # Trigger the workflow on push to the deployment branch
    workflow_dispatch:
        inputs:
            version:
                description: "Commit hash (long) or tag to roll back to (leave empty for latest push). Check README for more info."
                required: false
                type: string
jobs:
    build:
        if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
        defaults:
            run:
                working-directory: test # Set the working directory for the test job
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.inputs.version || 'main' }}
                  fetch-depth: 0 # Fetch all history for all branches and tags

            - name: Install dependencies
              run: npm install

            - name: Build Angular app
              run: |
                  echo "building app"
                  npm run build

    deploy:
        needs: build
        if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
        defaults:
            run:
                working-directory: test # Set the working directory for the test job
        runs-on: self-hosted

        steps:
            - name: Stop IIS Site
              run: |
                  echo "stopping IIS server"
                  Stop-IISSite -name "angular app" -confirm:$false
              shell: powershell

            - name: Backup and deploy IIS Directory
              run: |
                  $BackupPath = "C:\iisServer\angular-27-02-2025"
                  $NewPath = "C:\iisServer\angular"

                  if(Test-Path $BackupPath){
                      $duplicateItems = Get-Item "$BackupPath*"
                      if ($duplicateItems) {
                          $measure = $duplicateItems | Measure-Object
                          Write-Output "Count: $($measure.Count)"
                          for ($i = $($measure.Count -1); $i -ge 0; $i--) {
                              Write-Output "Index: $i"
                              if ($duplicateItems[$i].FullName) {
                                  Write-Output "FullName: $($duplicateItems[$i].FullName)"
                                  Rename-Item -Path $duplicateItems[$i].FullName -NewName "$BackupPath ($($i + 1))"
                              } else {
                                  Write-Output "FullName is null for index $i"
                              }
                          }
                      }
                  }


                  if(Test-Path $NewPath ){
                      Move-Item -Path $NewPath -Destination $BackupPath
                  }
                  Copy-Item -Recurse dist\test\browser\* $NewPath
                  if(Test-Path "$BackupPath\web.config"){
                      Copy-Item "$BackupPath\web.config" "$NewPath\web.config"
                  }

              shell: powershell

            - name: Start IIS Site
              run: |
                  echo "starting IIS server"
                  Start-IISSite -Name "angular app"
              shell: powershell
